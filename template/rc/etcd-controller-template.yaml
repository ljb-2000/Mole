apiVersion: v1
kind: ReplicationController
metadata:
  name: etcd-{{.Cell}}
spec:
  replicas: {{.Replicas}}
  template:
    metadata:
      labels:
        component: etcd
        cell: {{.Cell}}
        app: vitess
    spec:
      volumes:
        - name: certs
          # Uncomment one of the following lines to configure the location
          # of the root certificates file on your host OS. We need this so
          # we can import it into the container OS.
          # If your host OS is Fedora/RHEL:
          #hostPath: {path: /etc/pki/tls/certs/ca-bundle.crt}
          # If your host OS is Debian/Ubuntu/Gentoo:
          hostPath: {path: /etc/ssl/certs/ca-certificates.crt}
      containers:
        - name: etcd
          image: 192.168.212.19/vitess/etcd:v2.0.13-lite
          volumeMounts:
            - name: certs
              readOnly: true
              # Mount root certs from the host OS into the location
              # expected for our container OS (Debian):
              mountPath: /etc/ssl/certs/ca-certificates.crt
          resources:
            limits:
              memory: "128Mi"
              cpu: "100m"
          command:
            - bash
            - "-c"
            - |
              ipaddr=$(hostname -i)
              peer_url="http://$ipaddr:7001"
              client_url="http://$ipaddr:4001"

              export ETCD_NAME=$HOSTNAME
              export ETCD_DATA_DIR=/vt/vtdataroot/etcd-$ETCD_NAME
              export ETCD_STRICT_RECONFIG_CHECK=true
              export ETCD_ADVERTISE_CLIENT_URLS=$client_url
              export ETCD_INITIAL_ADVERTISE_PEER_URLS=$peer_url
              export ETCD_LISTEN_CLIENT_URLS=$client_url
              export ETCD_LISTEN_PEER_URLS=$peer_url


              if [ -d $ETCD_DATA_DIR ]; then
                rm -rf $ETCD_DATA_DIR
              fi

              if [ -d $ETCD_DATA_DIR ]; then
                # We've been restarted with an intact datadir.
                # Just run without trying to do any bootstrapping.
                echo "Resuming with existing data dir: $ETCD_DATA_DIR"
              else
                # This is the first run for this member.

                # If there's already a functioning cluster, join it.
                echo "Checking for existing cluster by trying to join..."
                if result=$(etcdctl -C http://etcd-{{.Cell}}:4001 member add $ETCD_NAME $peer_url); then
                  [[ "$result" =~ ETCD_INITIAL_CLUSTER=\"([^\"]*)\" ]] && \
                  export ETCD_INITIAL_CLUSTER="${BASH_REMATCH[1]}"
                  export ETCD_INITIAL_CLUSTER_STATE=existing
                  echo "Joining existing cluster: $ETCD_INITIAL_CLUSTER"
                else
                  # Join failed. Assume we're trying to bootstrap.

                  # First register with global topo, if we aren't global.
                  if [ "{{.Cell}}" != "global" ]; then
                    echo "Registering cell "{{.Cell}}" with global etcd..."
                    until etcdctl -C "http://etcd-global:4001" \
                        set "/vt/cells/{{.Cell}}" "http://etcd-{{.Cell}}:4001"; do
                      echo "[$(date)] waiting for global etcd to register cell '{{.Cell}}'"
                      sleep 1
                    done
                  fi

                  # Use DNS to bootstrap.

                  # First wait for the desired number of replicas to show up.
                  echo "Waiting for {{.Replicas}} replicas in SRV record for etcd-{{.Cell}}-srv..."
                  until [ $(getsrv etcd-server tcp etcd-{{.Cell}}-srv | wc -l) -eq {{.Replicas}} ]; do
                    echo "[$(date)] waiting for {{.Replicas}} entries in SRV record for etcd-{{.Cell}}-srv"
                    sleep 1
                  done

                  export ETCD_DISCOVERY_SRV=etcd-{{.Cell}}-srv
                  echo "Bootstrapping with DNS discovery:"
                  getsrv etcd-server tcp etcd-{{.Cell}}-srv
                fi
              fi

              # We've set up the env as we want it. Now run.
              etcd
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - "-c"
                  - |
                    # Find our member ID.
                    members=$(etcdctl -C http://etcd-{{.Cell}}:4001 member list)
                    if [[ "$members" =~ ^([0-9a-f]+):\ name=$HOSTNAME ]]; then
                      member_id=${BASH_REMATCH[1]}
                      echo "Removing $HOSTNAME ($member_id) from etcd-{{.Cell}} cluster..."
                      etcdctl -C http://etcd-{{.Cell}}:4001 member remove $member_id
                    fi
